     1                                  ; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     2                                  ;                               kernel.asm
     3                                  ; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     4                                  
     5                                  %include "sconst.inc"
     6                              <1> 
     7                              <1> ; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     8                              <1> ;                   sconst.inc,该文件是给kernel.asm使用的
     9                              <1> ; ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
    10                              <1> 
    11                              <1> ;进程控制表中的索引的宏定义
    12                              <1> P_STACKBASE	equ	0
    13                              <1> GSREG		equ	P_STACKBASE
    14                              <1> FSREG		equ	GSREG		+ 4
    15                              <1> ESREG		equ	FSREG		+ 4
    16                              <1> DSREG		equ	ESREG		+ 4
    17                              <1> EDIREG		equ	DSREG		+ 4
    18                              <1> ESIREG		equ	EDIREG		+ 4
    19                              <1> EBPREG		equ	ESIREG		+ 4
    20                              <1> KERNELESPREG	equ	EBPREG		+ 4
    21                              <1> EBXREG		equ	KERNELESPREG	+ 4
    22                              <1> EDXREG		equ	EBXREG		+ 4
    23                              <1> ECXREG		equ	EDXREG		+ 4
    24                              <1> EAXREG		equ	ECXREG		+ 4
    25                              <1> RETADR		equ	EAXREG		+ 4
    26                              <1> EIPREG		equ	RETADR		+ 4
    27                              <1> CSREG		equ	EIPREG		+ 4
    28                              <1> EFLAGSREG	equ	CSREG		+ 4
    29                              <1> ESPREG		equ	EFLAGSREG	+ 4
    30                              <1> SSREG		equ	ESPREG		+ 4
    31                              <1> P_STACKTOP	equ	SSREG		+ 4
    32                              <1> P_LDT_SEL	equ	P_STACKTOP
    33                              <1> P_LDT		equ	P_LDT_SEL	+ 4
    34                              <1> 
    35                              <1> TSS3_S_SP0	equ	4
    36                              <1> 
    37                              <1> INT_M_CTL	equ	0x20 ; I/O port for interrupt controller        <Master>
    38                              <1> INT_M_CTLMASK	equ	0x21 ; setting bits in this port disables ints  <Master>
    39                              <1> INT_S_CTL	equ	0xA0 ; I/O port for second interrupt controller <Slave>
    40                              <1> INT_S_CTLMASK	equ	0xA1 ; setting bits in this port disables ints  <Slave>
    41                              <1> 
    42                              <1> EOI		equ	0x20
    43                              <1> 
    44                              <1> ; 以下选择子值必须与 protect.h 中保持一致!!!，这几个定义是因为kernel.asm中要使用，所以才在这里定义了一下
    45                              <1> SELECTOR_FLAT_C		equ		0x08	; LOADER 里面已经确定了的.
    46                              <1> SELECTOR_TSS		equ		0x20	; TSS
    47                              <1> SELECTOR_KERNEL_CS	equ		SELECTOR_FLAT_C
    48                              <1> 
    49                                  
    50                                  ; 导入函数
    51                                  extern	cstart				;初始化中断，IDT，GDT等全局的配置
    52                                  extern	kernel_main			;初始化进程相关结构
    53                                  extern	exception_handler	;内部中断处理
    54                                  extern	spurious_irq		;外部中断处理
    55                                  extern	delay				;小延时函数
    56                                  extern	clock_handler		;时钟中断的核心处理函数，后续估计要在这里添加进程调度
    57                                  
    58                                  ; 导入全局变量
    59                                  extern	gdt_ptr			;保存GDT寄存器
    60                                  extern	idt_ptr			;保存IDT寄存器
    61                                  extern	p_proc_ready	;进程控制表
    62                                  extern	tss				;TSS结构变量
    63                                  extern	disp_pos		;打印函数用来控制位置的全局变量
    64                                  extern	k_reenter		;中断嵌套控制
    65                                  
    66                                  bits 32
    67                                  
    68                                  [SECTION .data]
    69 00000000 5E00                    clock_int_msg		db	"^", 0
    70                                  
    71                                  [SECTION .bss]
    72 00000000 <res 00000800>          StackSpace		resb	2 * 1024
    73                                  StackTop:		; 栈顶,此处为内核栈
    74                                  
    75                                  [section .text]	; 代码在此
    76                                  
    77                                  global _start	; 导出 _start
    78                                  global restart
    79                                  
    80                                  global	divide_error
    81                                  global	single_step_exception
    82                                  global	nmi
    83                                  global	breakpoint_exception
    84                                  global	overflow
    85                                  global	bounds_check
    86                                  global	inval_opcode
    87                                  global	copr_not_available
    88                                  global	double_fault
    89                                  global	copr_seg_overrun
    90                                  global	inval_tss
    91                                  global	segment_not_present
    92                                  global	stack_exception
    93                                  global	general_protection
    94                                  global	page_fault
    95                                  global	copr_error
    96                                  global  hwint00
    97                                  global  hwint01
    98                                  global  hwint02
    99                                  global  hwint03
   100                                  global  hwint04
   101                                  global  hwint05
   102                                  global  hwint06
   103                                  global  hwint07
   104                                  global  hwint08
   105                                  global  hwint09
   106                                  global  hwint10
   107                                  global  hwint11
   108                                  global  hwint12
   109                                  global  hwint13
   110                                  global  hwint14
   111                                  global  hwint15
   112                                  
   113                                  _start:
   114                                  	; 把 esp 从 LOADER 挪到 KERNEL
   115 00000000 BC[00080000]            	mov	esp, StackTop	; 堆栈在 bss 段中
   116                                  
   117 00000005 0F0105[00000000]        	sgdt	[gdt_ptr]	; cstart() 中将会用到 gdt_ptr
   118 0000000C E8(00000000)            	call	cstart		; 在此函数中改变了gdt_ptr，让它指向新的GDT
   119 00000011 0F0115[00000000]        	lgdt	[gdt_ptr]	; 使用新的GDT
   120                                  
   121 00000018 0F011D[00000000]        	lidt	[idt_ptr]
   122                                  
   123 0000001F EA[26000000]0800        	jmp	SELECTOR_KERNEL_CS:csinit
   124                                  csinit:		
   125                                  
   126                                  	;ud2	;触发BIOS中段号6，UD，未定义的操作码错误
   127                                  		; 触发中断之后，系统会立刻将eflag，cs和eip入栈
   128                                  	;jmp 0x40:0	;这个指令是一个错误指令，目的就是为了触发一个#NP 异常，进入中断处理函数
   129                                  	
   130                                  	; sti
   131                                  	; hlt		;处理器暂停指令
   132                                  	; jmp $
   133 00000026 31C0                    	xor	eax, eax
   134 00000028 66B82000                	mov	ax, SELECTOR_TSS
   135 0000002C 0F00D8                  	ltr	ax				;在ring0初始化TR寄存器，TSS的内容后面再填充
   136                                  
   137 0000002F E9(00000000)            	jmp	kernel_main		;进入该函数初始化进程控制表和TSS，然后ret从ring0->ring1
   138                                  
   139                                  
   140                                  
   141                                  ; 中断和异常 -- 硬件中断
   142                                  ; ---------------------------------	
   143                                  %macro  hwint_master    1
   144                                          push    %1
   145                                          call    spurious_irq
   146                                          add     esp, 4
   147                                          hlt
   148                                  %endmacro
   149                                  ; ---------------------------------
   150                                  
   151 00000034 90<rept>                ALIGN   16
   152                                  hwint00:                ; Interrupt routine for irq 0 (the clock).
   153 00000040 83EC04                  	sub	esp, 4	;跳过retaddr那个成员
   154 00000043 60                      	pushad		
   155 00000044 1E                      	push ds
   156 00000045 06                      	push	es	;  | 保存原寄存器值
   157 00000046 0FA0                    	push	fs	;  |
   158 00000048 0FA8                    	push	gs	; 
   159                                  	
   160 0000004A 668CD2                  	mov	dx, ss	;ds,es,ss相同
   161 0000004D 8EDA                    	mov	ds, dx
   162 0000004F 8EC2                    	mov	es, dx
   163                                  
   164 00000051 65FE0500000000           	inc byte [gs:0] ; 改变屏幕第0 行, 第0 列的字符
   165                                  
   166 00000058 B020                    	mov	al, EOI		; `. 重新使能时钟中断
   167 0000005A E620                    	out	INT_M_CTL, al	; / master 8259
   168                                  
   169 0000005C FF05[00000000]          	inc	dword [k_reenter]		;判断是否进入嵌套
   170 00000062 833D[00000000]00        	cmp	dword [k_reenter], 0
   171 00000069 7519                    	jne	.re_enter
   172                                  	;此时未嵌套，第一次进入中断
   173 0000006B BC[00080000]            	mov	esp, StackTop		; 切到内核栈
   174                                  
   175                                  	; sti		;使能所有外部中断，允许嵌套
   176                                  	; push	0
   177                                  	; call	clock_handler
   178                                  	; add	esp, 4
   179                                  	; cli
   180                                  
   181 00000070 8B25[00000000]          	mov	esp, [p_proc_ready]	; 离开内核栈
   182 00000076 0F00542448              	lldt	[esp + P_LDT_SEL]
   183 0000007B 8D442448                	lea	eax, [esp + P_STACKTOP]
   184 0000007F A3[04000000]            	mov	dword [tss + TSS3_S_SP0], eax	;重新设置ring0的esp，在进程切换时很重要
   185                                  
   186                                  .re_enter:	; 如果(k_reenter != 0)，会跳转到这里，此时中断嵌套了
   187 00000084 FF0D[00000000]          	dec	dword [k_reenter]
   188 0000008A 0FA9                    	pop	gs	; 	pop	fs	;  |
   189 0000008C 07                      	pop	es	;  | 恢复原寄存器值
   190 0000008D 1F                      	pop	ds	;  |
   191 0000008E 61                      	popad	; /
   192 0000008F 83C404                  	add	esp, 4
   193 00000092 CF                      	iretd
   194                                  
   195 00000093 90<rept>                ALIGN   16
   196                                  hwint01:                ; Interrupt routine for irq 1 (keyboard)
   197                                          hwint_master    1
   198 000000A0 6A01                <1>  push %1
   199 000000A2 E8(00000000)        <1>  call spurious_irq
   200 000000A7 83C404              <1>  add esp, 4
   201 000000AA F4                  <1>  hlt
   202                                  
   203 000000AB 90<rept>                ALIGN   16
   204                                  hwint02:                ; Interrupt routine for irq 2 (cascade!)
   205                                          hwint_master    2
   206 000000B0 6A02                <1>  push %1
   207 000000B2 E8(00000000)        <1>  call spurious_irq
   208 000000B7 83C404              <1>  add esp, 4
   209 000000BA F4                  <1>  hlt
   210                                  
   211 000000BB 90<rept>                ALIGN   16
   212                                  hwint03:                ; Interrupt routine for irq 3 (second serial)
   213                                          hwint_master    3
   214 000000C0 6A03                <1>  push %1
   215 000000C2 E8(00000000)        <1>  call spurious_irq
   216 000000C7 83C404              <1>  add esp, 4
   217 000000CA F4                  <1>  hlt
   218                                  
   219 000000CB 90<rept>                ALIGN   16
   220                                  hwint04:                ; Interrupt routine for irq 4 (first serial)
   221                                          hwint_master    4
   222 000000D0 6A04                <1>  push %1
   223 000000D2 E8(00000000)        <1>  call spurious_irq
   224 000000D7 83C404              <1>  add esp, 4
   225 000000DA F4                  <1>  hlt
   226                                  
   227 000000DB 90<rept>                ALIGN   16
   228                                  hwint05:                ; Interrupt routine for irq 5 (XT winchester)
   229                                          hwint_master    5
   230 000000E0 6A05                <1>  push %1
   231 000000E2 E8(00000000)        <1>  call spurious_irq
   232 000000E7 83C404              <1>  add esp, 4
   233 000000EA F4                  <1>  hlt
   234                                  
   235 000000EB 90<rept>                ALIGN   16
   236                                  hwint06:                ; Interrupt routine for irq 6 (floppy)
   237                                          hwint_master    6
   238 000000F0 6A06                <1>  push %1
   239 000000F2 E8(00000000)        <1>  call spurious_irq
   240 000000F7 83C404              <1>  add esp, 4
   241 000000FA F4                  <1>  hlt
   242                                  
   243 000000FB 90<rept>                ALIGN   16
   244                                  hwint07:                ; Interrupt routine for irq 7 (printer)
   245                                          hwint_master    7
   246 00000100 6A07                <1>  push %1
   247 00000102 E8(00000000)        <1>  call spurious_irq
   248 00000107 83C404              <1>  add esp, 4
   249 0000010A F4                  <1>  hlt
   250                                  
   251                                  ; ---------------------------------
   252                                  %macro  hwint_slave     1
   253                                          push    %1
   254                                          call    spurious_irq
   255                                          add     esp, 4
   256                                          hlt
   257                                  %endmacro
   258                                  ; ---------------------------------
   259                                  
   260 0000010B 90<rept>                ALIGN   16
   261                                  hwint08:                ; Interrupt routine for irq 8 (realtime clock).
   262                                          hwint_slave     8
   263 00000110 6A08                <1>  push %1
   264 00000112 E8(00000000)        <1>  call spurious_irq
   265 00000117 83C404              <1>  add esp, 4
   266 0000011A F4                  <1>  hlt
   267                                  
   268 0000011B 90<rept>                ALIGN   16
   269                                  hwint09:                ; Interrupt routine for irq 9 (irq 2 redirected)
   270                                          hwint_slave     9
   271 00000120 6A09                <1>  push %1
   272 00000122 E8(00000000)        <1>  call spurious_irq
   273 00000127 83C404              <1>  add esp, 4
   274 0000012A F4                  <1>  hlt
   275                                  
   276 0000012B 90<rept>                ALIGN   16
   277                                  hwint10:                ; Interrupt routine for irq 10
   278                                          hwint_slave     10
   279 00000130 6A0A                <1>  push %1
   280 00000132 E8(00000000)        <1>  call spurious_irq
   281 00000137 83C404              <1>  add esp, 4
   282 0000013A F4                  <1>  hlt
   283                                  
   284 0000013B 90<rept>                ALIGN   16
   285                                  hwint11:                ; Interrupt routine for irq 11
   286                                          hwint_slave     11
   287 00000140 6A0B                <1>  push %1
   288 00000142 E8(00000000)        <1>  call spurious_irq
   289 00000147 83C404              <1>  add esp, 4
   290 0000014A F4                  <1>  hlt
   291                                  
   292 0000014B 90<rept>                ALIGN   16
   293                                  hwint12:                ; Interrupt routine for irq 12
   294                                          hwint_slave     12
   295 00000150 6A0C                <1>  push %1
   296 00000152 E8(00000000)        <1>  call spurious_irq
   297 00000157 83C404              <1>  add esp, 4
   298 0000015A F4                  <1>  hlt
   299                                  
   300 0000015B 90<rept>                ALIGN   16
   301                                  hwint13:                ; Interrupt routine for irq 13 (FPU exception)
   302                                          hwint_slave     13
   303 00000160 6A0D                <1>  push %1
   304 00000162 E8(00000000)        <1>  call spurious_irq
   305 00000167 83C404              <1>  add esp, 4
   306 0000016A F4                  <1>  hlt
   307                                  
   308 0000016B 90<rept>                ALIGN   16
   309                                  hwint14:                ; Interrupt routine for irq 14 (AT winchester)
   310                                          hwint_slave     14
   311 00000170 6A0E                <1>  push %1
   312 00000172 E8(00000000)        <1>  call spurious_irq
   313 00000177 83C404              <1>  add esp, 4
   314 0000017A F4                  <1>  hlt
   315                                  
   316 0000017B 90<rept>                ALIGN   16
   317                                  hwint15:                ; Interrupt routine for irq 15
   318                                          hwint_slave     15
   319 00000180 6A0F                <1>  push %1
   320 00000182 E8(00000000)        <1>  call spurious_irq
   321 00000187 83C404              <1>  add esp, 4
   322 0000018A F4                  <1>  hlt
   323                                  
   324                                  ; 中断和异常 -- 异常
   325                                  divide_error:
   326 0000018B 6AFF                    	push	0xFFFFFFFF	; no err code
   327 0000018D 6A00                    	push	0		; vector_no	= 0
   328 0000018F EB4E                    	jmp	exception
   329                                  single_step_exception:
   330 00000191 6AFF                    	push	0xFFFFFFFF	; no err code
   331 00000193 6A01                    	push	1		; vector_no	= 1
   332 00000195 EB48                    	jmp	exception
   333                                  nmi:
   334 00000197 6AFF                    	push	0xFFFFFFFF	; no err code
   335 00000199 6A02                    	push	2		; vector_no	= 2
   336 0000019B EB42                    	jmp	exception
   337                                  breakpoint_exception:
   338 0000019D 6AFF                    	push	0xFFFFFFFF	; no err code
   339 0000019F 6A03                    	push	3		; vector_no	= 3
   340 000001A1 EB3C                    	jmp	exception
   341                                  overflow:
   342 000001A3 6AFF                    	push	0xFFFFFFFF	; no err code
   343 000001A5 6A04                    	push	4		; vector_no	= 4
   344 000001A7 EB36                    	jmp	exception
   345                                  bounds_check:
   346 000001A9 6AFF                    	push	0xFFFFFFFF	; no err code
   347 000001AB 6A05                    	push	5		; vector_no	= 5
   348 000001AD EB30                    	jmp	exception
   349                                  inval_opcode:
   350 000001AF 6AFF                    	push	0xFFFFFFFF	; no err code
   351 000001B1 6A06                    	push	6		; vector_no	= 6
   352 000001B3 EB2A                    	jmp	exception
   353                                  copr_not_available:
   354 000001B5 6AFF                    	push	0xFFFFFFFF	; no err code
   355 000001B7 6A07                    	push	7		; vector_no	= 7
   356 000001B9 EB24                    	jmp	exception
   357                                  double_fault:
   358 000001BB 6A08                    	push	8		; vector_no	= 8
   359 000001BD EB20                    	jmp	exception
   360                                  copr_seg_overrun:
   361 000001BF 6AFF                    	push	0xFFFFFFFF	; no err code
   362 000001C1 6A09                    	push	9		; vector_no	= 9
   363 000001C3 EB1A                    	jmp	exception
   364                                  inval_tss:
   365 000001C5 6A0A                    	push	10		; vector_no	= A
   366 000001C7 EB16                    	jmp	exception
   367                                  segment_not_present:
   368 000001C9 6A0B                    	push	11		; vector_no	= B
   369 000001CB EB12                    	jmp	exception
   370                                  stack_exception:
   371 000001CD 6A0C                    	push	12		; vector_no	= C
   372 000001CF EB0E                    	jmp	exception
   373                                  general_protection:
   374 000001D1 6A0D                    	push	13		; vector_no	= D
   375 000001D3 EB0A                    	jmp	exception
   376                                  page_fault:
   377 000001D5 6A0E                    	push	14		; vector_no	= E
   378 000001D7 EB06                    	jmp	exception
   379                                  copr_error:
   380 000001D9 6AFF                    	push	0xFFFFFFFF	; no err code
   381 000001DB 6A10                    	push	16		; vector_no	= 10h
   382 000001DD EB00                    	jmp	exception
   383                                  
   384                                  exception:
   385 000001DF E8(00000000)            	call	exception_handler
   386 000001E4 83C408                  	add	esp, 4*2	; 让栈顶指向 EIP，堆栈中从顶向下依次是：EIP、CS、EFLAGS
   387 000001E7 F4                      	hlt
   388                                  
   389                                  
   390                                  
   391                                  ; ====================================================================================
   392                                  ;       restart：该函数是进入ring0->ring1的关键，需要汇编实现，所以放在这里了
   393                                  ; ====================================================================================
   394                                  restart:
   395 000001E8 8B25[00000000]          	mov	esp, [p_proc_ready]		;esp指向PCB的开头
   396 000001EE 0F00542448              	lldt	[esp + P_LDT_SEL] 	;P_LDT_SEL是ldt选择子在PCB的偏移，填充ldtr寄存器
   397 000001F3 8D442448                	lea	eax, [esp + P_STACKTOP]	;lea命令是取地址，即PCB结构中的堆栈的顶部
   398 000001F7 A3[04000000]            	mov	dword [tss + TSS3_S_SP0], eax	;填充TSS结构中的ring0的堆栈地址
   399                                  
   400 000001FC 0FA9                    	pop	gs
   401 000001FE 0FA1                    	pop	fs
   402 00000200 07                      	pop	es
   403 00000201 1F                      	pop	ds
   404 00000202 61                      	popad	;8个通用寄存器弹栈
   405                                  
   406 00000203 83C404                  	add	esp, 4	;跳过retaddr
   407                                  
   408 00000206 CF                      	iretd	;从ring0跳到ring1，将eip，cs等一系列寄存器弹栈
